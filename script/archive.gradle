android.libraryVariants.all { variant ->
    def name = variant.name.capitalize()
    def suffix = name.replaceAll('([A-Z])', '$1').toLowerCase()
    def template = "${archivesBaseName}-${suffix}-${version}"

    // Force AAR archives to have the same naming conventions as the JAR's.
    variant.outputs.each { output ->
        def fileName = output.outputFile.name
        printf(fileName)
        if (fileName.endsWith('.aar')) {
            output.outputFile = new File(output.outputFile.parent, template + '.aar')
        }
    }

    task("javadoc${name}", type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
        options {
            links 'http://docs.oracle.com/javase/8/docs/api/'
            linksOffline 'http://d.android.com/reference', "${android.sdkDirectory}/docs/reference"
        }
        destinationDir = file("${rootProject.rootDir}/docs")
    }
    
    artifacts.add('archives', task("javadocJar${name}", type: Jar) {
        appendix "${suffix}"
        classifier 'javadoc'
        from tasks["javadoc${name}"].destinationDir
        destinationDir = file("${buildDir}/outputs/jar")
    })

    artifacts.add('archives', task("sourceJar${name}", type: Jar) {
        appendix "${suffix}"
        classifier 'source'
        from android.sourceSets.main.java.srcDirs
        destinationDir = file("${buildDir}/outputs/jar")
    })

    artifacts.add('archives', task("slimJar${name}", type: Jar) {
        appendix "${suffix}"
        from("${buildDir}/intermediates/transforms/retrolambda/release/folders/1/1/retrolambda") {
            exclude '**/BuildConfig.class'
            exclude '**/R$*.class'
            exclude '**/R.class'
        }
        destinationDir = file("${buildDir}/outputs/jar")
    })

    artifacts.add('archives', task("fatJar${name}", type: Jar) {
        appendix "${suffix}"
        classifier 'fat'
        // Add external dependency classes
        from configurations.compile.findAll {
            !it.getName().equals("android.jar") &&
            !it.getName().startsWith("junit") &&
            !it.getName().startsWith("atlantis") &&
            !it.getName().startsWith("hamcrest")
        }.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        // Add Atlantis classes
        from("${buildDir}/intermediates/transforms/retrolambda/release/folders/1/1/retrolambda") {
            exclude '**/BuildConfig.class'
            exclude '**/R$*.class'
            exclude '**/R.class'
        }
        destinationDir = file("${buildDir}/outputs/jar")
    })
}

